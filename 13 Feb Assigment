Q1. Explain why we have to use the Exception class while creating a Custom Exception.
Note: Here Exception class refers to the base class for all the exceptions.
ANS.
When creating custom exceptions in Python, it is recommended to inherit from the built-in Exception class or one of its subclasses. This is because the Exception 
class provides a standard interface for handling errors and exceptions in Python, including a message string and a traceback.

When creating custom exceptions in Python, it is recommended to inherit from the built-in Exception class or one of its subclasses. This is because the Exception
class provides a standard interface for handling errors and exceptions in Python, including a message string and a traceback.

Inheriting from Exception also allows your custom exception to be caught by any exception handling mechanism that catches Exception or a broader category of 
exceptions, making it easier to handle your custom exception in a consistent and predictable way.

In addition, inheriting from Exception also allows you to take advantage of other built-in functionality in Python, such as the ability to customize the
exception's error message and behavior, and the ability to add any additional attributes or methods that your custom exception needs.

Overall, using the Exception class as a base class for your custom exception provides a consistent and powerful way to create, raise, and handle exceptions in
your Python code.





Q2. Write a python program to print Python Exception Hierarchy.
ANS. import logging
logging.basicConfig(filename= 'error2.log' , level=[ logging.ERROR, logging.INFO])
try :
    with open('test.txt', 'r' ) as f:
        test = f.read()
except FileNotFoundError as e:
    logging.error('i am handleing file not found error {}'.format(e))
else :
    logging.info('this file is exist{}')
finally :
    logging.info('THIS IS exsicute AUTOMETICLY{}' )





Q3. What errors are defined in the ArithmeticError class? Explain any two with an example.
ANS . 
1. ZeroDivisionError--
import logging
logging.basicConfig(filename='error2.log' , lavel =  logging.ERROR)
try :
    10/0
except ZeroDivisionError as e:
    logging.error('i am try to handle the zerodevision error{}' .format(e))

2.OverFlowError-
import sys
import logging
logging.basicConfig(filename= 'error3.log' , level=logging.ERROR)
a= sys.maxsize
b = 2
try :
    c = a*b
except OverflowError as e:
    logging.error('i am handling over flow error {}  '.format(e))



Q4. Why LookupError class is used? Explain with an example KeyError and IndexError.
ANS. LookupError Exception is the Base class for errors raised when something can't be found. The base class for the exceptions that are raised when a key or 
index used on a mapping or sequence is invalid: IndexError, KeyError. An IndexError is raised when a sequence reference is out of range.

1.INDEX ERROR --
logging.basicConfig(filename = 'error2.log' , level = logging.ERROR)
try:
    l = [1,2,3,5,6]
    l[6]
except IndexError as e:
    logging.error('i ma solving this error how called indexeror{}'.format(e))

2.kEYERROR --
import logging
logging.basicConfig(filename= 'error2.log' , level=logging.ERROR)
try :
    d = {'key ' : 'uzair' , 1 : [1,3,4,5,6,6]}
except KeyError as e:
    logging.error('i am handling key error {]'.format(e))

Q5. Explain ImportError. What is ModuleNotFoundError?
ANS.IMPORT ERROR-- This error generally occurs when a class cannot be imported due to one of the following reasons: The imported class is in a circular dependency.
The imported class is unavailable or was not created. The imported class name is misspelled. The imported class from a module is misplaced.


MODULE NOT FOUND--
import logging
logging.basicConfig(filename= 'error3.log' , level=logging.ERROR)
try :
    import uzair
except ModuleNotFoundError as e:
    logging.error('i am handling MODULENOT FOUNDERROR error {}'.format(e))




Q6. List down some best practices for exception handling in python.

1. use always a spacific Exception
try:
    10/0
except ZeroDivisionError as e :
    print(e)
    NOT USE EXCEPTION FOR ZERO DIVISION ERROR

2.print always a proper massage
try :
    10/0
except ZeroDivisionError as e :
    print('i am trying to handle a zeroexception error', e)

3. always try to log 

import logging
logging.basicConfig(filename='error.log', level = logging.ERROR)
try :
    10/0
except ZeroDivisionError as e :
        logging.error('i am trying to handle a zeroexception error {} '.format(e))


4.always avoid to write a multiple exception handling
import logging
logging.basicConfig(filename='error.log', level = logging.ERROR)
try :
    10/0
except FileNotFoundError as e:
        logging.error('i am handling file not found {} '.format(e))
except AttributeError as e:
         logging.error('i am handling atribute {} '.format(e))    
except ZeroDivisionError as e :
        logging.error('i am trying to handle a zeroexception error {} '.format(e))







